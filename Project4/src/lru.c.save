#include "lru.h"
#include <stdio.h>
#include <stdlib.h>
#include "cache.h"

void lru_init_queue(Set *set) {
  LRUNode *s = NULL;
  LRUNode **pp = &s;  // place to chain in the next node
  for (int i = 0; i < set->line_count; i++) {
    Line *line = &set->lines[i];
    LRUNode *node = (LRUNode *)(malloc(sizeof(LRUNode)));
    node->line = line;
    node->next = NULL;
    (*pp) = node;
    pp = &((*pp)->next);
  }
  set->lru_queue = s;
}

void lru_init(Cache *cache) {
  Set *sets = cache->sets;
  for (int i = 0; i < cache->set_count; i++) {
    lru_init_queue(&sets[i]);
  }
}

void lru_destroy(Cache *cache) {
  Set *sets = cache->sets;
  for (int i = 0; i < cache->set_count; i++) {
    LRUNode *p = sets[i].lru_queue;
    LRUNode *n = p;
    while (p != NULL) {
      p = p->next;
      free(n);
      n = p;
    }
    sets[i].lru_queue = NULL;
  }
}

void lru_fetch(Set *set, unsigned int tag, LRUResult *result) {
  // TODO:
  // Implement the LRU algorithm to determine which line in
  // the cache should be accessed.
  //
  for(LRUNode **previous = &(set->lru_queue);(*previous)!=NULL;previous = 
  &((*previous))->next){
    LRUNode *cur = *previous;
    Line *line = *cur.line;
    if(&line.tag == tag && &line.vaild == 1){
      &result.access = HIT;
    }
    else if(&line.vaild == 0){
      &line.vaild = 1;
      &line.tag = tag;
      &result.access = COLD_MISS
    }
    else if(&cur.next == NULL){
      &line.vaild = 1;
      &line.tag = tag;
      &line.access = CONFLICT_MISS;
    } 
    else{
      continue;
    }
    &cur.next = &set.lru_queue; 
    &set.lru_queue = cur;
    &result.line = line;
    return;
  }
}
